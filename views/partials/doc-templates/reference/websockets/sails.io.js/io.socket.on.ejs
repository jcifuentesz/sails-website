<h1 id="io-socket-on-">io.socket.on()</h1>
<p>Start listening for server-sent events from Sails with the specified <code>eventName</code>.  Will trigger the provided callback function when a matching event is received.</p>
<pre><code data-language="javascript">io.socket.on(eventName, function (msg) {
  // ...
});
</code></pre><!-- __LANG=%%__ -->
<h3 id="usage" permalink="usage">Usage</h3>
<table>
<thead>
<tr>
<th></th>
<th>Argument</th>
<th style="text-align:center">Type</th>
<th style="text-align:left">Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>eventName</code></td>
<td style="text-align:center"><bubble type="string" colors="true"></bubble></td>
<td style="text-align:left">The name of the socket event, e.g. <code>&apos;recipe&apos;</code> or <code>&apos;welcome&apos;</code></td>
</tr>
<tr>
<td>2</td>
<td><code>handlerFn</code></td>
<td style="text-align:center"><bubble type="function" colors="true"></bubble></td>
<td style="text-align:left">An event handler that will be called when the server broadcasts a notification to this socket.  Will only be called if the incoming socket notification matches <code>eventName</code>.</td>
</tr>
</tbody>
</table>
<h5 id="event-handler" permalink="event-handler">Event handler</h5>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:left">Argument</th>
<th style="text-align:center">Type</th>
<th style="text-align:left">Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:left"><code>msg</code></td>
<td style="text-align:center"><bubble type="json" colors="true"></bubble></td>
<td style="text-align:left">The data from the socket notification.</td>
</tr>
</tbody>
</table>
<h3 id="when-is-the-event-handler-called-" permalink="when-is-the-event-handler-called">When is the event handler called?</h3>
<p>This event handler is called when the client receives an incoming socket notification that matches the specified event name (e.g. <code>&apos;welcome&apos;</code>).  This happens when the server broadcasts a message to this socket directly, or to a room of which it is a member.  To broadcast a socket notification, you either need to use the <a href="">blueprint API</a> or write some server-side code (e.g. in an action, helper, or even in a command-line script).  This is typically achieved in one of the following ways:</p>
<h6 id="low-level-socket-methods-sails-sockets-">Low-Level Socket Methods (<code>sails.sockets</code>)</h6>
<ul>
<li>server blasts out a message to all connected sockets (see <a href="http://sailsjs.org/documentation/reference/web-sockets/sails-sockets/blast">sails.sockets.blast()</a>)</li>
<li>server broadcasts a message directly to a particular socket using its unique id, or to an entire room full of sockets (see <a href="http://sailsjs.org/documentation/reference/web-sockets/sails-sockets/broadcast">sails.sockets.broadcast()</a>)</li>
</ul>
<h6 id="resourceful-pubsub-methods">Resourceful Pubsub Methods</h6>
<ul>
<li>server broadcasts a message about a record, which multiple sockets might be subscribed to (see <a href="http://sailsjs.org/documentation/reference/web-sockets/resourceful-pub-sub/publish">Model.publish()</a></li>
<li>server broadcasts a message as part of the &quot;Create&quot; blueprint action <em>(only relevant if using <a href="http://sailsjs.org/documentation/concepts/blueprints">blueprints</a>)</em></li>
</ul>
<h3 id="example" permalink="example">Example</h3>
<p>Listen for the &quot;order&quot; event:</p>
<pre><code data-language="javascript">io.socket.on(&apos;order&apos;, function onServerSentEvent (msg) {
  // msg =&gt; {...whatever the server broadcasted...}
});
</code></pre><!-- __LANG=%%__ -->
<h5 id="another-example-this-time-using-angular-" permalink="another-example,-this-time-using-angular">Another example, this time using Angular:</h5>
<blockquote>
<p>Note that this Angular example assumes the backend calls <code>publishCreate()</code> at some point.</p>
</blockquote>
<pre><code data-language="javascript">angular.module(&apos;cafeteria&apos;).controller(&apos;CheckoutCtrl&apos;, function ($scope) {

  $scope.orders = $scope.orders || [];

  if (!io.socket.alreadyListeningToOrders) {
    io.socket.alreadyListeningToOrders = true;

    io.socket.on(&apos;order&apos;, function (msg) {

      // Let&apos;s see what the server has to say...
      switch(msg.verb) {

        case &apos;created&apos;:
          $scope.orders.push(msg.data); // (add the new order to the DOM)
          $scope.$apply();              // (re-render)
          break;

        default: return; // ignore any unrecognized messages

      }//&lt; / switch &gt;

    });//&lt; / io.socket.on() &gt;

  }//&lt; / if not already listening to orders &gt;-

});
</code></pre><!-- __LANG=%%__ -->
<h3 id="handle-socket-connect-and-disconnect-events" permalink="handle-socket-connect-and-disconnect-events">Handle Socket &apos;Connect&apos; and &apos;Disconnect&apos; events</h3>
<p>If a socket&apos;s connection to the server was interrupted-- perhaps because the server was restarted, or the client had some kind of network issue-- it is possible to handle <code>connect</code> and <code>disconnect</code> events and manually reconnect the socket again.</p>
<p><code>sails.io.js</code> connects a socket for you automatically, so direct usage like this <strong>is not recommended for 99% of apps</strong>.  But in the spirit of completeness, it is worth mentioning that you can also bind your own handlers:</p>
<pre><code data-language="javascript">io.socket.on(&apos;connect&apos;, function onConnect(){
  console.log(&apos;This socket is now connected to the Sails server.&apos;);
});

io.socket.on(&apos;disconnect&apos;, function onDisconnect(){
  console.log(&apos;This socket lost connection to the Sails server&apos;);
});
</code></pre><!-- __LANG=%%__ -->
<h3 id="notes" permalink="notes">Notes</h3>
<blockquote>
<ul>
<li>Remember that a socket only stays subscribed to a room for as long as it is connected-- e.g. as long as the browser tab is open.</li>
<li>When listening for socket messages from resourceful pubsub calls, the event name is always the same as the identity of the calling model.  For example, if you have a model named &quot;UserComment&quot;, the model&apos;s identity (and therefore the socket event name used by <a href="http://sailsjs.org/documentation/reference/web-sockets/resourceful-pub-sub"><code>UserComment.publish()</code></a>) is &quot;usercomment&quot;.</li>
<li>For context-- socket notifications are also sometimes referred to as &quot;server-sent events&quot; or &quot;<a href="http://en.wikipedia.org/wiki/Comet_(programming" target="_blank">comet</a>) messages&quot;.</li>
</ul>
</blockquote>
<p><docmeta name="displayName" value="io.socket.on()"></docmeta></p>
<docmeta name="pageType" value="method">

</docmeta>