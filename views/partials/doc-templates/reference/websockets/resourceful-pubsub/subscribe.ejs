<h1 id="-subscribe-">.subscribe()</h1>
<p>Subscribe the requesting client socket to changes/deletions of one or more database records.</p>
<pre><code data-language="javascript">Something.subscribe(req, ids);
</code></pre><!-- __LANG=%%__ -->
<h3 id="usage" permalink="usage">Usage</h3>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:left">Argument</th>
<th style="text-align:center">Type</th>
<th style="text-align:left">Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:left"><code>req</code></td>
<td style="text-align:center"><bubble type="req" colors="true"></bubble></td>
<td style="text-align:left">The incoming socket request (<code>req</code>) containing the socket to subscribe.</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:left"><code>ids</code></td>
<td style="text-align:center"><bubble type="array" colors="true"></bubble></td>
<td style="text-align:left">An array of record ids (primary key values).</td>
</tr>
</tbody>
</table>
<p>When a client socket is subscribed to a record, it is a member of its dynamic &quot;record room&quot;.  That means it will receive all messages broadcasted to that room by <a href="http://sailsjs.com/documentation/reference/web-sockets/resourceful-pubsub/publish"><code>.publish()</code></a>.</p>
<h3 id="example" permalink="example">Example</h3>
<p>On the server, in a controller action:</p>
<pre><code data-language="javascript">// On the server:

  subscribeToLouies: function (req, res) {
    if (!req.isSocket) {
      return res.badRequest(&apos;Only a client socket can subscribe to Louies.  But you look like an HTTP request to me.&apos;);
    }

    // Let&apos;s say our client socket has a problem with people named &quot;louie&quot;.

    // First we&apos;ll find all users named &quot;louie&quot; (or &quot;louis&quot; even-- we should be thorough)
    User.find({ or: [{name: &apos;louie&apos;},{name: &apos;louis&apos;}] }).exec(function(err, usersNamedLouie){
      if (err) {
        return res.serverError(err);
      }

      // Now we&apos;ll subscribe our client socket to each of these records.
      User.subscribe(req, _.pluck(usersNamedLouie, &apos;id&apos;));

      // All done!  We could send down some data, but instead, we just send an empty 200 (OK) response.
      // 
      // &gt; Although we&apos;re ok telling this vengeful client socket when our users get
      // &gt; destroyed, it seems ill-advised to send him our Louies&apos; sensitive user data.
      // &gt; (We don&apos;t want to help this guy to hunt them down in real life!)
      return res.ok();

    });//&lt;/ User.find() &gt;
  }
</code></pre><!-- __LANG=%%__ -->
<p>Then, back in our client-side code:</p>
<pre><code data-language="javascript">// On the client:

// Send a request to the &quot;subscribeToLouies&quot; action, subscribing this client socket
// to all future events that the server publishes about Louies.
io.socket.get(&apos;/foo/bar/subscribeToLouies&apos;, function (data, jwr){
  if (jwr.error) {
    console.error(&apos;Could not subscribe to Louie-related notifications: &apos;+jwr.error);
    return;
  }

  console.log(&apos;Successfully subscribed.&apos;);

});
</code></pre><!-- __LANG=%%__ -->
<p>From now on, as long as our requesting client socket stays connected, it will receive a notification any time our server-side code (e.g. other actions or helpers) calls <code>User.publish()</code> for one of the Louies we subscribed to above.</p>
<p>In order for our client-side code to handle these future notifications, it must <em>listen</em> for the relevant event with <code>.on()</code>.  For example:</p>
<pre><code data-language="javascript">// Whenever a `user` event is received, say something.
io.socket.on(&apos;user&apos;, function(msg) {
  console.log(&apos;Got a message about a Louie: &apos;, msg);
});
</code></pre><!-- __LANG=%%__ -->
<p>See <a href="http://sailsjs.com/documentation/concepts/realtime">Concepts &gt; Realtime</a> for more background on the difference between rooms and events in Sails/Socket.io.</p>
<h3 id="notes" permalink="notes">Notes</h3>
<blockquote>
<ul>
<li>Be sure and check <code>req.isSocket === true</code> before passing in <code>req</code> to refer to the requesting socket.  The provided <code>req</code> must be from a socket request, not just any old HTTP request.</li>
<li><code>.subscribe()</code> will only work with requests made over a socket.io connection (e.g. using <code>io.socket.get()</code>), <em>not</em> over an http connection (e.g. using <code>jQuery.get()</code>).  See the <a href="http://sailsjs.org/documentation/reference/web-sockets/socket-client">sails.io.js socket client documentation</a> for information on using client sockets to send WebSockets/Socket.io messages with Sails.</li>
<li>This function does <em>not actually talk to the database</em>!  In fact, none of the resourceful pubsub methods do.  Remember: these are just a simplified abstraction layer built on top of the lower-level <code>sails.sockets</code> methods, designed to make your app cleaner and easier to debug by using conventional names for events/rooms/namespaces etc.</li>
</ul>
</blockquote>
<p><docmeta name="displayName" value=".subscribe()"></docmeta></p>
<docmeta name="pageType" value="method">

</docmeta>