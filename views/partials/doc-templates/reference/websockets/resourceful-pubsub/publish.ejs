<h1 id="-publish-">.publish()</h1>
<p>Publish an arbitrary message to clients subscribed to one or more model instances.</p>
<pre><code data-language="javascript">Something.publish(ids, data, req);
</code></pre><!-- __LANG=%%__ -->
<h3 id="usage" permalink="usage">Usage</h3>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:left">Argument</th>
<th style="text-align:center">Type</th>
<th>Details</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:left"><code>ids</code></td>
<td style="text-align:center"><bubble type="array" colors="true"></bubble></td>
<td>An array of record ids (primary key values).</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:left"><code>data</code></td>
<td style="text-align:center"><bubble type="json" colors="true"></bubble></td>
<td>The data to broadcast.</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:left"><code>req</code></td>
<td style="text-align:center"><bubble type="req" colors="true"></bubble></td>
<td>If provided, then the requesting socket will <em>not</em> receive the broadcast.</td>
</tr>
</tbody>
</table>
<h3 id="example" permalink="example">Example</h3>
<pre><code data-language="javascript">// On the server:

  tellSecretToBobs: function (req, res) {

    // Get the secret from the request.
    var secret = req.param(&apos;secret&apos;);

    // Look up all users named &quot;Bob&quot;.
    User.find({name: &apos;bob&apos;}, function(err, bobs) {
      if (err) {return res.serverError(err);}

      // Tell the secret to every client who is subscribed to these users,
      // except for the client that made this request in the first place.
      // Note that the secret is wrapped in a dictionary with a `verb` property -- this is not
      // required, but helpful if you&apos;ll also be listening for events from Sails blueprints.
      User.publish(_.pluck(bobs, &apos;id&apos;), {
        verb: &apos;messaged&apos;,
        data: secret
      }, req);

      return res.send();
    });

  }
</code></pre><!-- __LANG=%%__ -->
<pre><code data-language="javascript">// On the client:

  // Subscribe this client socket to Bob secrets (see the `.subscribe()` documentation for more info about subscribing to events:
  // http://sailsjs.com/documentation/reference/web-sockets/resourceful-pub-sub/subscribe
  io.socket.get(&apos;/subscribeToBobSecrets&apos;);

  // Whenever a `user` event is received, do something.
  io.socket.on(&apos;user&apos;, function(msg) {
     if (msg.verb === &apos;messaged&apos;) {
       console.log(&apos;Got a secret:&apos;, msg);
     }
     // else if (msg.verb === &apos;created&apos;) { ... }
     // else if (msg.verb === &apos;updated&apos;) { ... }
  });
</code></pre><!-- __LANG=%%__ -->
<h3 id="notes" permalink="notes">Notes</h3>
<blockquote>
<ul>
<li>Be sure and check <code>req.isSocket === true</code> before passing in <code>req</code> to refer to the requesting socket.  If used, the provided <code>req</code> must be from a socket request, not just any old HTTP request.</li>
</ul>
</blockquote>
<p><docmeta name="displayName" value=".publish()"></docmeta></p>
<docmeta name="pageType" value="method">

</docmeta>