<h1 id="model-settings">Model Settings</h1>
<p>The following properties can be specified at the top level of your model definition to override the defaults for that particular model.  To override the default settings shared by all of your models, edit <a href="https://github.com/balderdashy/sails-docs/blob/master/PAGE_NEEDED.md" target="_blank"><code>config/models.js</code></a>.</p>
<h3 id="-migrate-" permalink="migrate"><code>migrate</code></h3>
<pre><code data-language="javascript">migrate: &apos;safe&apos;
</code></pre><!-- __LANG=%%__ -->
<p>In short, this setting controls whether/how Sails will attempt to automatically rebuild the tables/collections/sets/etc. in your schema.</p>
<p>In a production environment (NODE_ENV===&quot;production&quot;) Sails always uses
<code>migrate:&quot;safe&quot;</code> to protect inadvertent deletion of your data. However during development, you have a few other options for convenience:</p>
<ol>
<li>safe  - never auto-migrate my database(s). I will do it myself (by hand)</li>
<li>alter - auto-migrate, but attempt to keep my existing data (experimental)</li>
<li>drop  - wipe/drop ALL my data and rebuild models every time I lift Sails</li>
</ol>
<p>When your sails app lifts, waterline validates all of the data in your database.  This flag tells waterline what to do with data when the data is corrupt.  You can set this flag to <code>safe</code> which will ignore the corrupt data and continue to lift.  You can also set it to</p>
<table>
<thead>
<tr>
<th>Auto-Migration Strategy</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>safe</code></td>
<td>never auto-migrate my database(s). I will do it myself, by hand.</td>
</tr>
<tr>
<td><code>alter</code></td>
<td>auto-migrate columns/fields, but attempt to keep my existing data (experimental)</td>
</tr>
<tr>
<td><code>drop</code></td>
<td>wipe/drop ALL my data and rebuild models every time I lift Sails</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Note, by using <code>drop</code>, or even <code>alter</code>, you risk losing your data.  Be careful.  Never use <code>drop</code> or <code>alter</code> with a production dataset. Additionally, on large databases <code>alter</code> may take a long time to complete at startup. This may cause commands like <code>sails console</code> to appear to hang.</p>
</blockquote>
<h3 id="-schema-" permalink="schema"><code>schema</code></h3>
<pre><code data-language="javascript">schema: true
</code></pre><!-- __LANG=%%__ -->
<p>A flag to toggle schemaless or schema mode in databases that support schemaless data structures. If turned off, this will allow you to store arbitrary data in a record. If turned on, only attributes defined in the model&apos;s <code>attributes</code> object will be stored.</p>
<p>For adapters that don&apos;t require a schema, such as Mongo or Redis, the default setting is <code>schema:false</code>.</p>
<h3 id="-connection-" permalink="connection"><code>connection</code></h3>
<pre><code data-language="javascript">connection: &apos;my-local-postgresql&apos;
</code></pre><!-- __LANG=%%__ -->
<p>The configured database <a href="http://sailsjs.org/documentation/reference/sails.config/sails.config.connections.html">connection</a> where this model will fetch and save its data.  Defaults to <code>localDiskDb</code>, the default connection that uses the <code>sails-disk</code> adapter.</p>
<h3 id="-identity-" permalink="identity"><code>identity</code></h3>
<pre><code data-language="javascript">identity: &apos;purchase&apos;
</code></pre><!-- __LANG=%%__ -->
<p>The lowercase unique key for this model, e.g. <code>user</code>.  By default, a model&apos;s <code>identity</code> is inferred automatically by lowercasing its filename.  You should never change this property on your models.</p>
<h3 id="-globalid-" permalink="globalid"><code>globalId</code></h3>
<pre><code data-language="javascript">globalId: &apos;Purchase&apos;
</code></pre><!-- __LANG=%%__ -->
<p>This flag changes the global name by which you can access your model (if the globalization of models is enabled).  You should never change this property on your models. To disable globals, see <a href="http://sailsjs.org/documentation/concepts/Globals?q=disabling-globals"><code>sails.config.globals</code></a>.</p>
<h3 id="autopk" permalink="autopk">autoPK</h3>
<pre><code data-language="javascript">autoPK: true
</code></pre><!-- __LANG=%%__ -->
<p>A flag to toggle the automatic definition of a primary key in your model. The details of this default PK vary between adapters (e.g. MySQL uses an auto-incrementing integer primary key, whereas MongoDB uses a randomized string UUID).  In any case, the primary keys generated by autoPK will be unique. If turned off no primary key will be created by default, and you will need to define one manually, e.g.:</p>
<pre><code data-language="javascript">attributes: {
  sku: {
    type: &apos;string&apos;,
    primaryKey: true,
    unique: true
  }
}
</code></pre><!-- __LANG=%%__ -->
<h3 id="-autocreatedat-" permalink="autocreatedat"><code>autoCreatedAt</code></h3>
<pre><code data-language="javascript">autoCreatedAt: true
</code></pre><!-- __LANG=%%__ -->
<p>A flag to toggle the automatic definition of a <code>createdAt</code> attribute in your model.  By default, <code>createdAt</code> is an attribute which will be automatically set when a record is created with the current timestamp, e.g.:</p>
<pre><code data-language="javascript">attributes: {
  createdAt: {
    type: &apos;datetime&apos;,
    defaultsTo: function (){ return new Date(); }
  }
}
</code></pre><!-- __LANG=%%__ -->
<h3 id="-autoupdatedat-" permalink="autoupdatedat"><code>autoUpdatedAt</code></h3>
<pre><code data-language="javascript">autoUpdatedAt: true
</code></pre><!-- __LANG=%%__ -->
<p>A flag to toggle the automatic definition of a <code>updatedAt</code> attribute in your model.  By default, <code>updatedAt</code> is an attribute which will be automatically set with the current timestamp every time a record is updated, e.g.:</p>
<pre><code data-language="javascript">attributes: {
  updatedAt: {
    type: &apos;datetime&apos;,
    defaultsTo: function (){ return new Date(); }
  }
}
</code></pre><!-- __LANG=%%__ -->
<h3 id="tablename" permalink="tablename">tableName</h3>
<pre><code data-language="javascript">tableName: &apos;some_preexisting_table&apos;
</code></pre><!-- __LANG=%%__ -->
<p>You can define a custom name for the physical collection in your adapter by adding a <code>tableName</code> attribute. <strong>This isn&apos;t just for tables</strong>.  In MySQL, PostgreSQL, Oracle, etc. this setting refers to the name of the table, but in MongoDB or Redis, it refers to the collection, and so forth. If no tableName is specified, Waterline will use the model&apos;s <code>identity</code> as its <code>tableName</code>.</p>
<p>This is particularly useful for working with pre-existing/legacy databases.</p>
<!-- in WL2, this is `cid` (but is backwards-compatible) -->
<h3 id="-attributes-" permalink="attributes"><code>attributes</code></h3>
<pre><code data-language="javascript">attributes: {
  name: { type: &apos;string&apos; },
  email: { type: &apos;email&apos; },
  age: { type: &apos;integer&apos; }
}
</code></pre><!-- __LANG=%%__ -->
<p>See <a href="http://sailsjs.org/documentation/concepts/ORM/Attributes.html">Attributes</a>.</p>
<docmeta name="displayName" value="Model Settings">
</docmeta>