<h1 id="cross-origin-resource-sharing-cors-">Cross-Origin Resource Sharing (CORS)</h1>
<!--
Your default Sails setup is already equipped to handle AJAX requests from a web page on the same domain.  But what if you need to handle AJAX requests originating from other domains?  You could set up your browser JSONP That's where [CORS](http://en.wikipedia.org/wiki/Cross-origin_resource_sharing) comes in.
-->
<p><a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing" target="_blank">CORS</a> is a mechanism that allows browser scripts on pages served from other domains (e.g. myothersite.com) to talk to your server (e.g. api.mysite.com).  Like JSONP, the goal of CORS is to function as a secure method to circumvent the <a href="http://en.wikipedia.org/wiki/Same-origin_policy" target="_blank">same-origin policy</a>; allowing your Sails server to successfully respond to requests from client-side JavaScript code running on a page from some other domain.  But unlike JSONP, it works with more than just GET requests.</p>
<p>Sails can be configured to allow cross-origin requests from a list of domains you specify, or from every domain.  This can be done on a per-route basis, or globally for every route in your app.</p>
<h3 id="enabling-cors" permalink="enabling-cors">Enabling CORS</h3>
<p>For security reasons, CORS is disabled by default in Sails.  But enabling it is dead-simple.</p>
<p>To allow cross-origin requests from <em>any</em> domain to <em>any</em> route in your app, simply enable <code>allRoutes</code> in <a href="http://sailsjs.org/documentation/reference/sails.config/sails.config.cors.html" target="_blank"><code>config/cors.js</code></a>:</p>
<pre><code data-language="javascript">allRoutes: true
</code></pre><!-- __LANG=%%__ -->
<p>See <a href="http://sailsjs.org/documentation/reference/sails.config/sails.config.cors.html" target="_blank"><code>sails.config.cors</code></a> for a comprehensive reference of all available options.</p>
<h3 id="configuring-cors-for-individual-routes" permalink="configuring-cors-for-individual-routes">Configuring CORS For Individual Routes</h3>
<p>Besides the global CORS configuration, you can set up individual routes in <code>config/routes.js</code> to accept (or deny) cross-origin requests.  To indicate that a route should accept CORS requests using the configuration parameters in <code>config/cors.js</code>, set its <code>cors</code> property to <code>true</code>:</p>
<pre><code data-language="javascript">&quot;get /foo&quot;: {
   controller: &quot;FooController&quot;,
   action: &quot;index&quot;,
   cors: true
}
</code></pre><!-- __LANG=%%__ -->
<p>If you have the <code>allRoutes</code> parameter set to <code>true</code> in <code>config.cors.js</code>, but you want to exempt a specific route, you can do so by explicitly setting its <code>cors</code> property to <code>false</code>:</p>
<pre><code data-language="javascript">&quot;get /foo&quot;: {
   controller: &quot;FooController&quot;,
   action: &quot;index&quot;,
   cors: false
}
</code></pre><!-- __LANG=%%__ -->
<p>To override specific CORS configuration parameters for a route, add a <code>cors</code> property object:</p>
<pre><code data-language="javascript">&quot;get /foo&quot;: {
   controller: &quot;FooController&quot;,
   action: &quot;index&quot;,
   cors: {
     origin: &quot;http://sailsjs.org, http://sailsjs.com&quot;,
     credentials: false
   }
}
</code></pre><!-- __LANG=%%__ -->
<h3 id="security-levels" permalink="security-levels">Security Levels</h3>
<p>By default, Sails will still process all the requests that come in regardless of domain, even with CORS enabled: it will simply set the appropriate headers on the response so that the <em>client</em> can decide whether or not to show the response.  For example, if you send a <code>GET</code> request to <code>/foo/bar</code> from a domain that is not in your CORS whitelist, the <code>bar</code> action in your <code>FooController.js</code> file will still run, but the browser will throw away the result.  This may seem counterintuitive, but it is important because it allows non-browser-based clients (like <a href="https://www.getpostman.com" target="_blank">Postman</a> and <a href="http://curl.haxx.se/" target="_blank">curl</a>) to work while still blocking the kind of attacks that the <a href="http://en.wikipedia.org/wiki/Same-origin_policy" target="_blank">Same-Origin Policy</a> is meant to protect against.</p>
<p>If you want to completely prevent Sails from processing requests from disallowed domains, you can use the <code>securityLevel</code> setting:</p>
<pre><code data-language="javascript">module.exports.cors = {
  allRoutes: true,
  origin: &quot;http://sailsjs.org&quot;,
  securityLevel: 1
}
</code></pre><!-- __LANG=%%__ -->
<p>Security level 1 (high) will respond with a 403 status code to any request from a disallowed origin prefixed with the <code>http</code> or <code>https</code> protocol.  Security level 2 (very high) will do the same, but extended to <em>all</em> protocols (so things like Postman and curl won&apos;t work).</p>
<docmeta name="displayName" value="CORS">
</docmeta>