<h1 id="content-security-policy">Content Security Policy</h1>
<p><a href="https://www.owasp.org/index.php/Clickjacking" target="_blank">Content Security Policy (CSP)</a> is a <a href="https://w3c.github.io/webappsec/specs/content-security-policy" target="_blank">W3C specification</a> for instructing the client browser as to which location and/or which type of resources are allowed to be loaded.  This spec uses &quot;directives&quot; to define loading behaviors for target resource types. Directives can be specified using HTTP response headers or HTML <code>&lt;meta&gt;</code> tags.</p>
<h3 id="enabling-csp" permalink="enabling-csp">Enabling CSP</h3>
<h5 id="using-lusca-https-github-com-krakenjs-lusca-luscacspoptions-" permalink="using-lusca">Using <a href="https://github.com/krakenjs/lusca#luscacspoptions" target="_blank">lusca</a></h5>
<blockquote>
<p><code>lusca</code> is open-source under the <a href="https://github.com/krakenjs/lusca/blob/master/LICENSE.txt" target="_blank">Apache license</a></p>
</blockquote>
<pre><code data-language="javascript"># In your sails app
npm install lusca --save --save-exact
</code></pre><!-- __LANG=%%__ -->
<p>Then add <code>csp</code> in <a href="http://sailsjs.com/anatomy/config/http-js"><code>config/http.js</code></a>:</p>
<pre><code data-language="javascript">// ...

  csp: require(&apos;lusca&apos;).csp({
    policy: {
      &apos;default-src&apos;: &apos;*&apos;
    }
  }),

  // ...

  order: [
    // ...
    &apos;csp&apos;,
    // ...
  ]
</code></pre><!-- __LANG=%%__ -->
<h5 id="supported-directives" permalink="supported-directives">Supported directives</h5>
<p>To give you an idea how this works, here&apos;s a snapshot of supported CSP directives, as of 2016:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Directive</th>
<th style="text-align:left"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">default-src</td>
<td style="text-align:left">Loading policy for all resources type in case a resource type dedicated directive is not defined (fallback)</td>
</tr>
<tr>
<td style="text-align:left">script-src</td>
<td style="text-align:left">Defines which scripts the protected resource can execute</td>
</tr>
<tr>
<td style="text-align:left">object-src</td>
<td style="text-align:left">Defines from where the protected resource can load plugins</td>
</tr>
<tr>
<td style="text-align:left">style-src</td>
<td style="text-align:left">Defines which styles (CSS) the user applies to the protected resource</td>
</tr>
<tr>
<td style="text-align:left">img-src</td>
<td style="text-align:left">Defines from where the protected resource can load images</td>
</tr>
<tr>
<td style="text-align:left">media-src</td>
<td style="text-align:left">Defines from where the protected resource can load video and audio</td>
</tr>
<tr>
<td style="text-align:left">frame-src</td>
<td style="text-align:left">Defines from where the protected resource can embed frames</td>
</tr>
<tr>
<td style="text-align:left">font-src</td>
<td style="text-align:left">Defines from where the protected resource can load fonts</td>
</tr>
<tr>
<td style="text-align:left">connect-src</td>
<td style="text-align:left">Defines which URIs the protected resource can load using script interfaces</td>
</tr>
<tr>
<td style="text-align:left">form-action</td>
<td style="text-align:left">Defines which URIs can be used as the action of HTML form elements</td>
</tr>
<tr>
<td style="text-align:left">sandbox</td>
<td style="text-align:left">Specifies an HTML sandbox policy that the user agent applies to the protected resource</td>
</tr>
<tr>
<td style="text-align:left">script-nonce</td>
<td style="text-align:left">Defines script execution by requiring the presence of the specified nonce on script elements</td>
</tr>
<tr>
<td style="text-align:left">plugin-types</td>
<td style="text-align:left">Defines the set of plugins that can be invoked by the protected resource by limiting the types of resources that can be embedded</td>
</tr>
<tr>
<td style="text-align:left">reflected-xss</td>
<td style="text-align:left">Instructs a user agent to activate or deactivate any heuristics used to filter or block reflected cross-site scripting attacks, equivalent to the effects of the non-standard X-XSS-Protection header</td>
</tr>
<tr>
<td style="text-align:left">report-uri</td>
<td style="text-align:left">Specifies a URI to which the user agent sends reports about policy violation</td>
</tr>
</tbody>
</table>
<blockquote>
<p>For more information, see the <a href="https://w3c.github.io/webappsec/specs/content-security-policy/" target="_blank">W3C CSP Spec</a>.</p>
</blockquote>
<h5 id="browser-compatibility" permalink="browser-compatibility">Browser compatibility</h5>
<p>Different CSP response headers are supported by different browsers.  For example, <code>Content-Security-Policy</code> is the W3C standard, but various versions of Chrome, Firefox, and IE use <code>X-Content-Security-Policy</code> or <code>X-WebKit-CSP</code>.  For the latest information on browser support, see <a href="https://www.owasp.org/index.php/Content_Security_Policy" target="_blank">OWasp</a>.</p>
<h3 id="additional-resources" permalink="additional-resources">Additional Resources</h3>
<ul>
<li><a href="https://www.owasp.org/index.php/Content_Security_Policy" target="_blank">Content Security Policy (OWasp)</a></li>
<li>Learn more about installing HTTP middleware in <a href="http://sailsjs.com/docs/concepts/middleware">Concepts &gt; Middleware</a>.</li>
</ul>
<p><docmeta name="displayName" value="Content Security Policy"></docmeta></p>
<docmeta name="tags" value="csp,content security policy">
</docmeta>