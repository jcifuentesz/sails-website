<h1 id="deployment">Deployment</h1>
<h3 id="overview" permalink="overview">Overview</h3>
<h4 id="before-you-deploy" permalink="before-you-deploy">Before You Deploy</h4>
<p>Before you launch any web application, you should ask yourself a few questions:</p>
<ul>
<li>What is your expected traffic?</li>
<li>Are you contractually required to meet any uptime guarantees, e.g. a Service Level Agreement (SLA)?</li>
<li>What sorts of front-end apps will be &quot;hitting&quot; your infrastructure?<ul>
<li>Android apps</li>
<li>iOS apps</li>
<li>desktop web browsers</li>
<li>mobile web browsers (tablets, phones, iPad minis?)</li>
<li>tvs, watches, toasters..?</li>
</ul>
</li>
<li>And what kinds of things will they be requesting?<ul>
<li>JSON?</li>
<li>HTML?</li>
<li>XML?</li>
</ul>
</li>
<li>Will you be taking advantage of realtime pubsub features with Socket.io?<ul>
<li>e.g. chat, realtime analytics, in-app notifications/messages</li>
</ul>
</li>
<li>How are you tracking crashes and errors?<ul>
<li>Take a look at Sails&apos; log config</li>
</ul>
</li>
</ul>
<h4 id="deploying-on-a-single-server" permalink="deploying-on-a-single-server">Deploying On a Single Server</h4>
<p>Node.js is pretty darn fast.  For many apps, one server is enough to handle the expected traffic-- at least at first.</p>
<h5 id="configure" permalink="configure">Configure</h5>
<ul>
<li>All your production environment settings are stored in <code>config/env/production.js</code></li>
<li>Configure your app to run on port 80 (if not behind a proxy like nginx). If you&apos;re using nginx, be sure to configure it to relay websockets to your app. You can find guidance here in nginx docs <a href="http://nginx.org/en/docs/http/websocket.html" target="_blank">WebSocket proxying</a>.</li>
<li>Configure the &apos;production&apos; environment so that all of your css/js gets bundled up, and the internal servers are switched into the appropriate environment (requires <a href="https://github.com/balderdashy/sails-wiki/blob/0.9/assets.md" target="_blank">linker</a>)</li>
<li>Make sure your database is set-up on the production server. This is especially important if you are using a relational database such as MySQL, because sails sets all your models to <code>migrate:safe</code> when run in production, which means no auto-migrations are run on starting up the app. You can set your database up the following way:<ul>
<li>Create the database on the server and then run your sails app with <code>migrate:alter</code> locally, but configured to use the production server as your db. This will automatically set things up.</li>
<li>In case you can&apos;t connect to the server remotely, you&apos;ll simply dump your local schema and import it into the database server.</li>
</ul>
</li>
<li><a href="http://sailsjs.org/documentation/concepts/Security/CSRF.html?q=enabling-csrf-protection">Enable CSRF protection</a> for your POST, PUT, and DELETE requests</li>
<li>Enable SSL</li>
<li>IF YOU&apos;RE USING SOCKETS:<ul>
<li>Configure <code>config/sockets.js</code> to use socket.io&apos;s recommended production settings <a href="https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO#recommended-production-settings" target="_blank">here</a><ul>
<li>e.g. enable the <code>flashsocket</code> transport</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="deploy" permalink="deploy">Deploy</h5>
<p>In production, instead of <code>sails lift</code>, you&apos;ll want to use forever or PM2 to make sure your app will keep running, even if it crashes.</p>
<ul>
<li>Install forever: <code>sudo npm install -g forever</code><ul>
<li>More about forever: <a href="https://github.com/nodejitsu/forever" target="_blank">https://github.com/nodejitsu/forever</a></li>
</ul>
</li>
<li>Or install PM2: <code>sudo npm install pm2 -g --unsafe-perm</code><ul>
<li>More information about that: <a href="https://github.com/Unitech/pm2" target="_blank">https://github.com/Unitech/pm2</a></li>
</ul>
</li>
<li>From your app directory, start the server either with <code>forever start app.js --prod</code> or <code>pm2 start app.js -x -- --prod</code><ul>
<li>This is the same thing as using <code>sails lift --prod</code>, but if the server crashes, it will be automatically restarted.</li>
</ul>
</li>
</ul>
<docmeta name="displayName" value="Deployment">
</docmeta>