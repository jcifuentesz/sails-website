<h1 id="policies-sessionauth-js">policies/sessionAuth.js</h1>
<h3 id="purpose" permalink="purpose">Purpose</h3>
<p>This is a policy file.  Like any policy, you can apply it to any of your controller actions.  (See <a href="http://sailsjs.com/anatomy/config/policies-js">config/policies.js</a> for more information on how to configure policies to apply to controller actions.)</p>
<p>The main purpose of <code>sessionAuth.js</code> is as an example.  But for many apps, this simple session authentication policy will actually be the only policy you need.  Use it to protect actions that <em>should never</em> allow unauthenticated users.</p>
<h3 id="how-it-works" permalink="how-it-works">How it works</h3>
<p>This policy prevents access for all but authenticated users.  It simply checks <code>req.session.userId</code>, and if it is <a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy" target="_blank">truthy</a>, then it interprets that to mean this request came from a logged-in user.  So in that case, it proceeds to the next policy-- or, if this is the last policy, the relevant action.  Otherwise, if <code>req.session.userId</code> is <em>not</em> truthy, the policy sends a 403 response using <a href="http://sailsjs.org/documentation/reference/response-res/res-forbidden"><code>res.forbidden()</code></a>.</p>
<h3 id="assumptions" permalink="assumptions">Assumptions</h3>
<p>This policy assumes that, in the controller actions that you use to authenticate a user, you set <code>req.session.userId</code> to a truthy value.  A common best practice is to use the <code>id</code> of the signed-in user.  For example, you might include the following code in a <code>handleLogin</code> action that receives requests from your login form:</p>
<pre><code data-language="javascript">User.findOne({
  username: req.param(&apos;username&apos;),
  password: req.param(&apos;password&apos;)
}).exec(function (err, matchingUser) {
  if (err) { return res.serverError(err); }
  if (!matchingUser) { return res.notFound(); }

  //--&#x2022;
  // Save the id of the user in their secure session.
  // &gt; This tracks this requesting user agent as authenticated,
  // &gt; and gives us a way to access the user id of this logged-in
  // &gt; user when they send subsequent requests.
  req.session.userId = matchingUser.id;

  return res.ok();

});
</code></pre><!-- __LANG=%%__ -->
<h3 id="more-about-policies" permalink="more-about-policies">More about policies</h3>
<p>For more information about policies and how to use them in your app, see <a href="http://sailsjs.com/docs/concepts/policies">Concepts &gt; Policies</a>.</p>
<blockquote>
<p>It&apos;s best to avoid implementing numerous or complex policies in your app.  Instead, when implementing features like granular, role-based permissions, rely on your <a href="http://sailsjs.com/docs/concepts/controllers">actions</a> to reject unwanted access.  Your actions should also be responsible for any necessary personalization of the view locals and JSON response data you send in the response.</p>
<p>For example, if you need to implement user-level or role-based permissions in your application, the most straightforward approach is to take care of the relevant checks at the top of your controller action-- either inline, or by calling out to a helper.  Following this best practice will significantly enhance the maintainability of your code.</p>
</blockquote>
<docmeta name="displayName" value="sessionAuth.js">
</docmeta>