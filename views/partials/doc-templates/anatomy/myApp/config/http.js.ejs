<h1 id="myapp-config-http-js">myApp/config/http.js</h1>
<p>This file is conventionally used for configuring the underlying HTTP server (the <code>sails.config.http</code> object.)</p>
<p>This includes all HTTP-specific middleware, including the serving/caching of flat files.</p>
<docmeta name="displayName" value="http.js">

<pre><code data-language="text">/**
 * HTTP Server Settings
 * (sails.config.http)
 *
 * Configuration for the underlying HTTP server in Sails.
 * Only applies to HTTP requests (not WebSockets)
 *
 * For more information on configuration, check out:
 * http://sailsjs.org/#!/documentation/reference/sails.config/sails.config.http.html
 */

module.exports.http = {

  /****************************************************************************
  *                                                                           *
  * Express middleware to use for every Sails request. To add custom          *
  * middleware to the mix, add a function to the middleware config object and *
  * add its key to the &quot;order&quot; array. The $custom key is reserved for         *
  * backwards-compatibility with Sails v0.9.x apps that use the               *
  * `customMiddleware` config option.                                         *
  *                                                                           *
  ****************************************************************************/

  middleware: {

  /***************************************************************************
  *                                                                          *
  * The order in which middleware should be run for HTTP request. (the Sails *
  * router is invoked by the &quot;router&quot; middleware below.)                     *
  *                                                                          *
  ***************************************************************************/

    // order: [
    //   &apos;startRequestTimer&apos;,
    //   &apos;cookieParser&apos;,
    //   &apos;session&apos;,
    //   &apos;myRequestLogger&apos;,
    //   &apos;bodyParser&apos;,
    //   &apos;handleBodyParserError&apos;,
    //   &apos;compress&apos;,
    //   &apos;methodOverride&apos;,
    //   &apos;poweredBy&apos;,
    //   &apos;$custom&apos;,
    //   &apos;router&apos;,
    //   &apos;www&apos;,
    //   &apos;favicon&apos;,
    //   &apos;404&apos;,
    //   &apos;500&apos;
    // ],

  /****************************************************************************
  *                                                                           *
  * Example custom middleware; logs each request to the console.              *
  *                                                                           *
  ****************************************************************************/

    // myRequestLogger: function (req, res, next) {
    //     console.log(&quot;Requested :: &quot;, req.method, req.url);
    //     return next();
    // }


  /***************************************************************************
  *                                                                          *
  * The body parser that will handle incoming multipart HTTP requests. By    *
  * default as of v0.10, Sails uses                                          *
  * [skipper](http://github.com/balderdashy/skipper). See                    *
  * http://www.senchalabs.org/connect/multipart.html for other options.      *
  *                                                                          *
  * Note that Sails uses an internal instance of Skipper by default; to      *
  * override it and specify more options, make sure to &quot;npm install skipper&quot; *
  * in your project first.  You can also specify a different body parser or  *
  * a custom function with req, res and next parameters (just like any other *
  * middleware function).                                                    *
  *                                                                          *
  ***************************************************************************/

    // bodyParser: require(&apos;skipper&apos;)({strict: true})

  },

  /***************************************************************************
  *                                                                          *
  * The number of seconds to cache flat files on disk being served by        *
  * Express static middleware (by default, these files are in `.tmp/public`) *
  *                                                                          *
  * The HTTP static cache is only active in a &apos;production&apos; environment,      *
  * since that&apos;s the only time Express will cache flat-files.                *
  *                                                                          *
  ***************************************************************************/

  // cache: 31557600000
};
</code></pre><!-- __LANG=%%__ -->
</docmeta>